/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package stargateBack.api;

import stargateBack.model.Bandeau;
import stargateBack.model.Led;
import stargateBack.model.Porte;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
@javax.annotation.Generated(value = "stargateBack.codegen.languages.SpringCodegen", date = "2018-01-17T12:31:05.539Z")

@Api(value = "portes", description = "the portes API")
public interface PortesApi {

    @ApiOperation(value = "recupère un bandeau par son ID", notes = "Retourne un bandeau", response = Bandeau.class, tags={ "bandeaux", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Bandeau.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied", response = Void.class),
        @ApiResponse(code = 404, message = "Bandeau not found", response = Void.class) })
    
    @RequestMapping(value = "/portes/{porteId}/bandeaux/{bandeauId}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Bandeau> getBandeauById(@ApiParam(value = "ID du bandeau à retourner",required=true ) @PathVariable("bandeauId") Integer bandeauId,@ApiParam(value = "ID de la porte à retourner",required=true ) @PathVariable("porteId") Integer porteId);


    @ApiOperation(value = "Recupère tous les bandeaux", notes = "Retourne la liste des bandeaux", response = Bandeau.class, responseContainer = "List", tags={ "bandeaux", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Bandeau.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Bandeaux not found", response = Void.class) })
    
    @RequestMapping(value = "/portes/{porteId}/bandeaux",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Bandeau>> getBandeaux(@ApiParam(value = "ID de la porte à retourner",required=true ) @PathVariable("porteId") Integer porteId);


    @ApiOperation(value = "recupère une led d'un bandeau par son ID", notes = "Retourne un bandeau", response = Led.class, tags={ "leds", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Led.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied", response = Void.class),
        @ApiResponse(code = 404, message = "Pet not found", response = Void.class) })
    
    @RequestMapping(value = "/portes/{porteId}/bandeaux/{bandeauId}/leds/{ledId}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Led> getLedById(@ApiParam(value = "ID du bandeau selectionné",required=true ) @PathVariable("bandeauId") Integer bandeauId,@ApiParam(value = "ID de la led du bandeau à retourner",required=true ) @PathVariable("ledId") Integer ledId,@ApiParam(value = "ID de la porte à retourner",required=true ) @PathVariable("porteId") Integer porteId);


    @ApiOperation(value = "Recupère toutes les leds du bandeau", notes = "Retourne la liste des les du bandeau", response = Led.class, responseContainer = "List", tags={ "leds", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Led.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid ID supplied", response = Void.class),
        @ApiResponse(code = 404, message = "Leds not found", response = Void.class) })
    
    @RequestMapping(value = "/portes/{porteId}/bandeaux/{bandeauId}/leds",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Led>> getLeds(@ApiParam(value = "ID du bandeau à retourner",required=true ) @PathVariable("bandeauId") Integer bandeauId,@ApiParam(value = "ID de la porte à retourner",required=true ) @PathVariable("porteId") Integer porteId);


    @ApiOperation(value = "recupère une porte par son ID", notes = "Retourne une porte", response = Porte.class, tags={ "portes", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Porte.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied", response = Void.class),
        @ApiResponse(code = 404, message = "Porte not found", response = Void.class) })
    
    @RequestMapping(value = "/portes/{porteId}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Porte> getPorteById(@ApiParam(value = "ID de la porte à retourner",required=true ) @PathVariable("porteId") Integer porteId);


    @ApiOperation(value = "Recupère tous les portes", notes = "Retourne la liste des portes", response = Porte.class, responseContainer = "List", tags={ "portes", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Porte.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Portes not found", response = Void.class) })
    
    @RequestMapping(value = "/portes",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Porte>> getPortes();


    @ApiOperation(value = "Met à jour l'état de la led", notes = "", response = Void.class, tags={ "leds", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input", response = Void.class) })
    
    @RequestMapping(value = "/portes/{porteId}/bandeaux/{bandeauId}/leds/{ledId}",
        produces = { "application/xml", "application/json" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateLed(@ApiParam(value = "ID du bandeau selectionné",required=true ) @PathVariable("bandeauId") Integer bandeauId,@ApiParam(value = "ID de la led du bandeau à retourner",required=true ) @PathVariable("ledId") Integer ledId,@ApiParam(value = "ID de la porte à retourner",required=true ) @PathVariable("porteId") Integer porteId,@ApiParam(value = "Led à mettre à jour" ,required=true )  @Valid @RequestBody Led body);


    @ApiOperation(value = "Met à jour l'état de toutes les leds du bandeau", notes = "", response = Void.class, tags={ "leds", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input", response = Void.class) })
    
    @RequestMapping(value = "/portes/{porteId}/bandeaux/{bandeauId}/leds",
        produces = { "application/xml", "application/json" }, 
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateLeds(@ApiParam(value = "ID du bandeau dont les leds doivent être mises à jour",required=true ) @PathVariable("bandeauId") Integer bandeauId,@ApiParam(value = "ID de la porte à retourner",required=true ) @PathVariable("porteId") Integer porteId,@ApiParam(value = "", required=true) @RequestPart(value="niveauRouge", required=true)  Integer niveauRouge,@ApiParam(value = "", required=true) @RequestPart(value="niveauVert", required=true)  Integer niveauVert,@ApiParam(value = "", required=true) @RequestPart(value="niveaubleu", required=true)  Integer niveaubleu);

}
